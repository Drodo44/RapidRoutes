/** * Freight Intelligence System - Production Test Suite */import { it, describe, expect, vi, beforeEach } from 'vitest';import { FreightIntelligence } from './lib/FreightIntelligence.js';import { adminSupabase } from './utils/supabaseClient.js';describe('FreightIntelligence System', () => {    let intel;        beforeEach(() => {        intel = new FreightIntelligence();                // Mock Supabase for testing        vi.spyOn(adminSupabase, 'from').mockImplementation(() => ({            select: () => Promise.resolve({ data: [], error: null }),            upsert: () => Promise.resolve({ data: [{}], error: null }),            update: () => Promise.resolve({ data: {}, error: null })        }));    });    describe('Core Utilities', () => {        it('generates consistent city pair hashes', () => {            const hash = intel.generateCityPairHash('Chicago', 'IL', 'Detroit', 'MI');            expect(hash).toBe('CHICAGO_IL_DETROIT_MI');        });        it('validates coordinates properly', () => {            expect(intel.calculateDistance(null, null, 0, 0)).toBe(0);            expect(intel.calculateDistance(41.8781, -87.6298, 42.3314, -83.0458))                .toBeCloseTo(237, 0);        });        it('converts degrees to radians correctly', () => {            expect(intel.toRad(180)).toBeCloseTo(Math.PI, 5);            expect(intel.toRad(90)).toBeCloseTo(Math.PI / 2, 5);            expect(intel.toRad(0)).toBe(0);        });    });    describe('HERE API Integration', () => {        it('generates search grid with proper structure', () => {            const centerLat = 41.8781;            const centerLon = -87.6298;            const grid = intel.generateSearchGrid(centerLat, centerLon, 50, 4);            expect(grid).toHaveLength(8);            expect(grid[0]).toEqual({ lat: centerLat, lon: centerLon });        });        it('finds cities nearby with validation', async () => {            const result = await intel.findAndCacheCitiesNearby(41.8781, -87.6298);            expect(Array.isArray(result)).toBe(true);                        if (result.length > 0) {                expect(result[0]).toHaveProperty('city');                expect(result[0]).toHaveProperty('state');                expect(result[0]).toHaveProperty('distance');            }        });    });    describe('Database Integration', () => {        const testOrigin = { city: 'Chicago', state: 'IL' };        const testDest = { city: 'Detroit', state: 'MI' };        const testEquipment = 'V';        const mockOriginCities = [{            city: 'Chicago',            state: 'IL',            county: 'Cook',            distance: 0,            lat: 41.8781,            lon: -87.6298        }];        const mockDestCities = [{            city: 'Detroit',            state: 'MI',            county: 'Wayne',            distance: 0,            lat: 42.3314,            lon: -83.0458        }];        it('stores and retrieves city pairs', async () => {            const result = await intel.storeCityPair(                testOrigin.city,                testOrigin.state,                testDest.city,                testDest.state,                mockOriginCities,                mockDestCities,                testEquipment            );            expect(result).toBeTruthy();        });        it('updates usage statistics with retries', async () => {            const result = await intel.updateUsage(                intel.generateCityPairHash(                    testOrigin.city,                    testOrigin.state,                    testDest.city,                    testDest.state                ),                testEquipment            );            expect(result).toBeTruthy();        });        it('tracks statistics correctly', async () => {            // Simulate some operations            await intel.findAndCacheCitiesNearby(41.8781, -87.6298);            await intel.getCityPair(                testOrigin.city,                testOrigin.state,                testDest.city,                testDest.state            );            const stats = intel.getStats();            expect(stats.apiCalls).toBeGreaterThan(0);            expect(typeof stats.cacheHitRate).toBe('string');            expect(stats.cacheHitRate).toMatch(/%$/);        });    });    afterEach(() => {        vi.restoreAllMocks();    });});